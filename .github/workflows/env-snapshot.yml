name: Environment snapshot

on:

  workflow_call:
    inputs:

      pypi-name:
        description: Name of the Python package distribution as it appears on PyPI
        type: string
        required: true

      version:
        description: Package version to install
        type: string
        required: true

      pip-install-target:
        description: Installation target to use as arg for `pip install` command
        type: string
        required: false
        default: ${{ format('{0}=={1}', inputs.pypi-name, inputs.version) }}

      env-name:
        description: Name of the Conda environment to snapshot
        type: string
        required: false
        default: ${{ format('{0}-{1}', inputs.pypi-name, inputs.version) }}

      python-version:
        description: Python version to install
        required: false
        default: '3.11'
        type: string

      requirements-file:
        description: Name of the requirements file
        type: string
        required: false
        default: requirements.txt

      environment-file:
        description: Name of the Conda environment file
        type: string
        required: false
        default: environment.yml

defaults:
  run:
    shell: bash -l {0}

env:
  PIP_PROGRESS_BAR: 'off'

jobs:
  install-and-collect:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - pip-install-target: ${{ inputs.pip-install-target || format('{0}=={1}', inputs.pypi-name, inputs.version) }}
            env-name: ${{ inputs.env-name || format('{0}-{1}', inputs.pypi-name, inputs.version) }}
            python-version: ${{ inputs.python-version }}
            requirement-file: ${{ inputs.requirement-file }}
            environment-file: ${{ inputs.environment-file }}

    steps:
      
      - name: Set up Conda environment with Python
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: ${{ matrix.env-name }}
          python-version: ${{ matrix.python-version }}

      - name: Install ${{ matrix.pip-install-target }}
        run: |
          pip install "${{ matrix.pip-install-target }}"

      - name: Create output directory ${{ matrix.env-name }}
        run: |
          mkdir "${{ matrix.env-name }}"

      - name: Save environment info (${{ matrix.requirements-file }})
        working-directory: ${{ matrix.env-name }}
        run: |
          pip freeze > "${{ matrix.requirements-file }}"

          cat "${{ matrix.requirements-file }}"

      - name: Save environment info (${{ matrix.environment-file }})
        working-directory: ${{ matrix.env-name }}
        run: |
          conda env export \
          -n "${{ matrix.env-name }}"
          --no-builds \
          -f "${{ matrix.environment-file }}"

          cat "${{ matrix.environment-file }}"

      - name: Save as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env-name }}
          path: ${{ matrix.env-name }}
          if-no-files-found: error
